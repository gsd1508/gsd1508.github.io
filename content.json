{"meta":{"title":"忠爱golang","subtitle":"快乐学习","description":"this study golang book","author":"义薄云天","url":"https://gsd1508.github.io"},"pages":[],"posts":[{"title":"Git配置操作","slug":"Git配置操作","date":"2021-05-12T03:38:28.000Z","updated":"2021-05-12T03:38:55.023Z","comments":true,"path":"2021/05/12/Git配置操作/","link":"","permalink":"https://gsd1508.github.io/2021/05/12/Git%E9%85%8D%E7%BD%AE%E6%93%8D%E4%BD%9C/","excerpt":"","text":"本地初始化git文件夹12# 命令 git init 查看本地项目 git状态12# 命令git status 添加文件到暂存区12#命令git add . 提交暂存区中的内容到本地仓库12# 命令git commit -m &quot;这里是你要提交的文字信息，自己随便写&quot; 远程仓库设置配置（码云）以及生成（公钥）123&gt; 设置本机绑定SSH公钥，实现免密码登录！（这一步非常重要）&gt; 打开终端输入指令:`cd ~/.ssh`和`ls`查看文件列表 如下图 1我们需要一对id_dsa 或 id_rsa 命名的文件，其中一个带有 .pub 扩展名。 `.pub` 文件就是需要上传到Git服务器的公钥，另一个则是私钥。 如果找不到这样的文件（或者根本没有 .ssh 目录），如果没有找到,则通过`ssh-keygen`指令来创建该文件 macOs生成公钥1234打开终端输入：cd ~/.ssh 进入该目录然后输入指令: ssh-keygen 这里会提示让输入key的存储路径(默认是:/Users/mac/.ssh/id_rsa),以及密钥口令(输入两次,我这里输入的是6个6),如果没有特殊指定,直接全部Enter即可，如下图 ![image-20201227013736095](/Users/mhl/Library/Application Support/typora-user-images/image-20201227013736095.png) 看到这一步就表示公钥生成成功了！将生成成功的公钥打开编辑模式复制到码云上面去如下图![image-20201227013933641](/Users/mhl/Library/Application Support/typora-user-images/image-20201227013933641.png)","categories":[],"tags":[],"keywords":[]},{"title":"DataGrip备份数据库","slug":"DataGrip备份数据库","date":"2021-05-12T03:37:06.000Z","updated":"2021-05-12T03:37:18.548Z","comments":true,"path":"2021/05/12/DataGrip备份数据库/","link":"","permalink":"https://gsd1508.github.io/2021/05/12/DataGrip%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE%E5%BA%93/","excerpt":"","text":"数据库导出表结构123第一：选择你要导出的数据第二：点击右键选择Export with mysqldump 第三：选择mysql 安装的位置的 mysqldump.exe文件的路径，默认勾选的不用管他第四：导出outPath路径设置 /Users/faker/Desktop/pts1.sql 面的指令设置：1234wxLogin -d --column-statistics=0 --result-file=&quot;/Users/faker/Desktop/pts1.sql&quot;wxLogin：是要导出的数据名字-d：表示你要导出表结构不包含数据--column-statistics=0：表示如果本地数据库版本过高，远程数据库过低 就需要加入这句话，否者导出的数据库会报错","categories":[],"tags":[],"keywords":[]},{"title":"docker配置Nginx","slug":"docker配置Nginx","date":"2021-05-12T03:36:22.000Z","updated":"2021-05-12T03:36:30.304Z","comments":true,"path":"2021/05/12/docker配置Nginx/","link":"","permalink":"https://gsd1508.github.io/2021/05/12/docker%E9%85%8D%E7%BD%AENginx/","excerpt":"","text":"docker安装Niginx第一步：必须先进入 cd /root1234567cd /root然后创建下面的文件夹mkdir nginxmkdir nginx/wwwmkdir nginx/logsmkdir nginx/confmkdir nginx/conf/conf.d 第二步：执行下面的命令123下面的命如果服务器80端口被占用，可以将冒号前面的80更改为其他端口，这里启动的目的是为了把里面的配置文件从容器里面copy出来,下面还的删除容器的。docker run --name mynginx -p 80:80 -d nginx 第三步：copy配置文件出来1234先查看容器Iddocker ps -adocker cp 你的容器Id:/etc/nginx/nginx.conf /root/nginx/conf/docker cp 你的容器Id:/etc/nginx/conf.d /root/nginx/conf 第四步：删除镜像1234注意这一步非常重要：-v /root/nginx/www:/usr/share/nginx/html,这一步其实就是将docker容器里面的/usr/share/nginx/html目录映射到本地宿主机的/root/nginx/www目录来，然后部署vue项目就可以直接丢到本地服务器的www目录里面。下面第6步有解释。docker run -d -p 80:80 --name mynginx -v /root/nginx/www:/usr/share/nginx/html -v /root/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v /root/nginx/conf/conf.d:/etc/nginx/conf.d -v /root/nginx/logs:/var/log/nginx nginx:latest 第六步：部署前端vue项目12直接进入 cd /root/nginx/www然后将前端打包的文件丢进去，然后解压出来(注意解压出来的话，一定是要在www目录下，不能包含解压自己的目录) 第七步：直接访问 ip:端口就可以了如下图 下面是配置前端浏览器通过域名访问1# 先进入nginx配置目录，如下图 ![image-20201227015211481](/Users/mhl/Library/Application Support/typora-user-images/image-20201227015211481.png) 然后将里面的default.conf配置文件copy一份出来，如下图（这里的default.conf我已经改名字了所以看不到）![image-20201227015236205](/Users/mhl/Library/Application Support/typora-user-images/image-20201227015236205.png) 如果是部署前端项目的话解析好域名ip以后，就将前端的 gunguVue.conf 配置文件里面改为如下图， 前端就可以在浏览器访问该项目了。![image-20201227015332779](/Users/mhl/Library/Application Support/typora-user-images/image-20201227015332779.png) 下面是配置后端 api 接口，让前端可以用域名请求接口同样copy 一份 default.conf 然后修改里面的内容,然后保存。如下图![image-20201227015412145](/Users/mhl/Library/Application Support/typora-user-images/image-20201227015412145.png) 下面是docker 获取宿主机 ip 命令行，如图：#命令 ifconfig ![image-20201227015515575](/Users/mhl/Library/Application Support/typora-user-images/image-20201227015515575.png) # 此时前端就可以通过上面填写的域名 api.gungun.2775775.com 请求了。 如下图![image-20201227015525725](/Users/mhl/Library/Application Support/typora-user-images/image-20201227015525725.png)","categories":[],"tags":[],"keywords":[]},{"title":"Linux安装docker","slug":"Linux安装docker","date":"2021-05-12T03:35:39.000Z","updated":"2021-05-12T03:35:58.910Z","comments":true,"path":"2021/05/12/Linux安装docker/","link":"","permalink":"https://gsd1508.github.io/2021/05/12/Linux%E5%AE%89%E8%A3%85docker/","excerpt":"","text":"查看系统内核版本信息：（必须64位，且centos内核版本为3.1及以上）1uname -r 安装123**安装前可查看device-mapper-persistent-data和lvm2是否已经安装**rpm -qa|grep device-mapper-persistent-data rpm -qa|grep lvm2 安装依赖软件包1yum install -y yum-utils device-mapper-persistent-data lvm2 设置yum源1yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 更新yum软件包索引1yum makecache fast 安装最新版本docker-ce1yum install docker-ce -y 启动docker1234systemctl start dockersystemctl status dockersystemctl enable dockersystemctl restart docker 更换 docker阿里云镜像如下图123456781. sudo mkdir -p /etc/docker2. sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27; &#123; &quot;registry-mirrors&quot;: [&quot;https://imeayf9x.mirror.aliyuncs.com&quot;] &#125;EOF3. sudo systemctl daemon-reload4. sudo systemctl restart docker ![image-20201227014533646](/Users/mhl/Library/Application Support/typora-user-images/image-20201227014533646.png) 获取容器的Ip1docker inspect --format=&#x27;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#x27; 容器名称|容器id 进入容器1sudo docker exec -it 775c7c9ee1e1 /bin/bash docker容器安装vim123456781. 进入容器docker exec -it e1066fe2db35 /bin/bash2. 进入要修改的文件目录cd /etc/mysql3. 安装vim （如果不安装vim在使用vim的时候会报找不到。） apt-get update apt-get install vim4. 修改my.conf配置","categories":[],"tags":[],"keywords":[]},{"title":"mysql8.0修改密码","slug":"mysql8-0修改密码","date":"2021-05-12T03:34:34.000Z","updated":"2021-05-12T03:34:48.958Z","comments":true,"path":"2021/05/12/mysql8-0修改密码/","link":"","permalink":"https://gsd1508.github.io/2021/05/12/mysql8-0%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81/","excerpt":"","text":"mysql8.0+修改密码123456use mysql;update user set authentication_string=&#x27;&#x27; where user=&#x27;root&#x27;; -- 将字段置为空ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;wqkj#@~8&amp;@$%&amp;&#x27;;ALTER user &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;wqkj#@~8&amp;@$%&amp;&#x27;; -- 修改密码为rootflush privileges;","categories":[],"tags":[],"keywords":[]},{"title":"Linux常用命令","slug":"Linux常用命令","date":"2021-05-12T03:33:42.000Z","updated":"2021-05-12T03:33:56.485Z","comments":true,"path":"2021/05/12/Linux常用命令/","link":"","permalink":"https://gsd1508.github.io/2021/05/12/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"","text":"查看端口比占用 12后面加入指定的端口netstat -tunlp | grep 8080 查看有哪些端口在使用中 1netstat -lnp 给文件夹或者文件授权 123chmod -R 777 /home/leisuServerchmod -R 777 build.sh 查询应用进程pid 1ps -ef | grep &#x27;应用名&#x27; **检查mysql 死锁命令 ** 123select * from information_schema.INNODB_TRX;然后干掉threadkill 983292 查询linux文件 1whereis nginx 查看进程pid 打开的文件数 1lsof -p 72430 | wc -l 特定的tcp端口 1lsof -i tcp:80 **设置linux打开文件数，永久生效（需要重启） ** 123456789ulimit -avim /etc/security/limits.conf 在最后加入 *soft nofile 4096*hard nofile 4096设置完毕后重启服务器 命令shutdown -r now 123456#安装epel源yum install epel-release#安装htopyum install -y htop#安装完毕后命令行输入htop 12345678910快速使用git clone https://github.com/boutell/rinetd.gitcd rinetdmake &amp;&amp; make installecho &quot;0.0.0.0 8080 www.baidu.com 80&quot; &gt; /etc/rinetd.conf启动命令 rinetd -c /etc/rinetd.confbindaddress bindport connectaddress connectport源地址 源端口 目的地址 目的端口","categories":[],"tags":[],"keywords":[]},{"title":"golang交叉编译","slug":"golang交叉编译","date":"2021-05-12T03:31:28.000Z","updated":"2021-05-12T03:31:55.152Z","comments":true,"path":"2021/05/12/golang交叉编译/","link":"","permalink":"https://gsd1508.github.io/2021/05/12/golang%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/","excerpt":"","text":"后台启动带日志1234567#命令nohup ./mainLeiSuPc &gt;log 2&gt;&amp;1 &amp;其中log是保存输出的文件名称；2&gt;&amp;1 表示不仅命令行正常的输出保存到log中，产生错误信息的输出也保存到log文件中；&amp; 表示该进程在后台运行；nohup表示进程在当用户注销（logout）或者网络断开时不会被终止。注意：这里若不指定输出日志文件，缺省地会输出到nohup.out文件中 后台执行1nohup ./main &amp; Mac 下编译 Linux 和 Windows 64位可执行程序12CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build main.goCGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build main.go Linux 下编译 Mac 和 Windows 64位可执行程序12CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build main.goCGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build main.go Windows 下编译 Mac 和 Linux 64位可执行程序12345678SET CGO_ENABLED=0SET GOOS=darwinSET GOARCH=amd64go build main.goSET CGO_ENABLED=0SET GOOS=linuxSET GOARCH=amd64go build main.go","categories":[],"tags":[],"keywords":[]},{"title":"mysql设置updateTime 时间触发器","slug":"mysql设置sql 各种设置","date":"2021-05-11T12:16:48.000Z","updated":"2021-05-12T03:29:07.231Z","comments":true,"path":"2021/05/11/mysql设置sql 各种设置/","link":"","permalink":"https://gsd1508.github.io/2021/05/11/mysql%E8%AE%BE%E7%BD%AEsql%20%E5%90%84%E7%A7%8D%E8%AE%BE%E7%BD%AE/","excerpt":"","text":"12# 命令 alter table leisuDb.courtTableListOne modify column updateTimeAt timestamp NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(); 时间戳查询12345select * from gungun_zuqiu_odds where update_at = unix_timestamp(&#x27;2019-12-11 13:00:31&#x27;);只取年月日查询select * from date_format(FROM_UNIXTIME(update_at), &#x27;%Y-%m-%d&#x27;) = date_format(now(), &#x27;%Y-%m-%d&#x27;)# 查询时间戳SELECT asian_capot_m,asian_capot_tie,asian_capot_g,big,little,size_t from gungun_zuqiu_odds where FROM_UNIXTIME(create_at, &#x27;%Y-%m-%d&#x27;)= &#x27;2020-12-09&#x27;; mysql 相差8个小时12345# 命令select now();show variables like &#x27;%time_zone%&#x27;;set global time_zone = &#x27;+8:00&#x27;;flush privileges; 关于修改MySQL数据库字符集1alter database dev_score default character set utf8 COLLATE utf8_general_ci; mysql 设置触发器(可触发表每一行有变化的数据)123456789101112131415161718192021222324delimiter $create trigger credit_getafter update on gungun_zuqiu_competitionfor each rowbeginif (select id from gungun_zuqiu_competitionTemp where id = NEW.id) = NEW.idthenupdate gungun_zuqiu_competitionTemp set id = NEW.id,lsid =NEW.lsid,begin_date = NEW.begin_date,lsname = NEW.lsname,begin1=NEW.begin1,team1 = NEW.team1,team2 = NEW.team2,aside1=NEW.aside1,aside2 = NEW.aside2,assault1=NEW.assault2,control1=NEW.assault1,control2=NEW.control2,corner1=NEW.corner1,corner2=NEW.corner2,door1=NEW.door1,door2=NEW.door2,half1=NEW.half1,half2=NEW.half2,red1=NEW.red1,red2=NEW.red2,risk1=NEW.risk1,risk2 = NEW.risk2,s1= NEW.s1,s2=NEW.s2,yellow1=NEW.yellow1,yellow2 = NEW.yellow2,zheng1= NEW.zheng1,zheng2 =NEW.zheng2,dot1=NEW.dot1,dot2 = NEW.dot2,status = NEW.status where id = NEW.id;elseif NEW.status = 1 or NEW.status=2 or NEW.status = 3 or NEW.status = -1 or NEW.status = 0theninsert into gungun_zuqiu_competitionTemp(id,lsid,begin_date,lsname,begin1,team1,team2,aside1,aside2,assault1,assault2,control1,control2,corner1,corner2,door1,door2,half1,half2,red1,red2,risk1,risk2,s1,s2,yellow1,yellow2,zheng1,zheng2,dot1,dot2,team1id,team2id,ynamicTime,st_at,status,placeName)values (NEW.id,NEW.lsid,NEW.begin_date,NEW.lsname,NEW.begin1,NEW.team1,NEW.team2,NEW.aside1,NEW.aside2,NEW.assault1,NEW.assault2,NEW.control1,NEW.control2,NEW.corner1,NEW.corner2,NEW.door1,NEW.door2,NEW.half1,NEW.half2,NEW.red1,NEW.red2,NEW.risk1,NEW.risk2,NEW.s1,NEW.s2,NEW.yellow1,NEW.yellow2,NEW.zheng1,NEW.zheng2,NEW.dot1,NEW.dot2,NEW.team1id,NEW.team2id,NEW.ynamicTime,NEW.st_at,NEW.status,NEW.placeName);end if;end$ 触发器例子123456789101112131415161718create definer = root@`%` trigger bbbb after update on gungun_zuqiu_competition for each rowBEGIN DELETE from gungun_zuqiu_competitionTemp where old.`status`=-1; IF ((old.s1+old.s2+old.half1+old.half2+old.yellow1+old.yellow2+old.red1+old.red2+old.corner1+old.corner2+old.control1+old.control2+old.door1+old.door2) != (new.s1+new.s2+new.half1+new.half2+new.yellow1+new.yellow2+new.red1+new.red2+new.corner1+new.corner2+new.control1+new.control2+new.door1+new.door2)) or (old.`status`!=new.`status`) THEN DELETE from gungun_zuqiu_competitionTemp where id=new.id; insert into gungun_zuqiu_competitionTemp select * from gungun_zuqiu_competition where id =new.id; END IF;END;","categories":[],"tags":[],"keywords":[]}]}